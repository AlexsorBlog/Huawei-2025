// renderer.js
// –ü–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é —Ç–∞ –¥–æ–¥–∞–Ω–æ –ª–æ–≥—ñ–∫—É –∞–∫–æ—Ä–¥–µ–æ–Ω—É

// === üí° –•–µ–ª–ø–µ—Ä–∏ (safe, flatten) ===

function safe(v) {
    return v === null || v === undefined ? "" : v;
}

function flatten(obj, prefix = "", out = {}) {
    for (const [k, v] of Object.entries(obj || {})) {
        const newKey = prefix ? `${prefix}.${k}` : k;
        if (typeof v === "object" && !Array.isArray(v) && v !== null) {
            flatten(v, newKey, out);
        } else {
            const displayValue = (typeof v === 'string' && v.length > 200) ? v.substring(0, 197) + '...' : v;
            out[newKey] = safe(displayValue);
        }
    }
    return out;
}

// =================================================================
// === –§–£–ù–ö–¶–Ü–á –†–ï–ù–î–ï–†–ò–ù–ì–£ HTML ===
// =================================================================

/**
 * –°—Ç–≤–æ—Ä—é—î HTML-—Ç–∞–±–ª–∏—Ü—é –ö–ª—é—á-–ó–Ω–∞—á–µ–Ω–Ω—è –∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º-–∞–∫–æ—Ä–¥–µ–æ–Ω–æ–º.
 * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó.
 * @param {Array<Array<string>>} rows - –ú–∞—Å–∏–≤ –ø–∞—Ä [–∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–Ω—è].
 * @param {boolean} isExpanded - –ß–∏ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∞ —Å–µ–∫—Ü—ñ—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.
 */
function renderKeyValueTable(title, rows, isExpanded = false) {
    const collapsedClass = isExpanded ? '' : 'collapsed';
    
    let html = `<h2 class="collapsible-header ${collapsedClass}">${title}</h2>`;
    html += `<div class="collapsible-content ${collapsedClass}">`;
    html += `<div class="table-wrapper">`; // –û–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è —Ç—ñ–Ω—ñ —ñ –∫—É—Ç—ñ–≤
    html += '<table class="data-table"><tbody>';
    
    rows.forEach(([key, value]) => {
        const isCritical = (key.includes('–ö—Ä–∏—Ç–∏—á–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏') && parseInt(value) > 0) || (typeof value === 'string' && /down|fail/i.test(value));
        const valueClass = isCritical ? 'critical' : '';
        html += `<tr><th>${safe(key)}</th><td class="${valueClass}">${safe(value)}</td></tr>`;
    });
    
    html += '</tbody></table>';
    html += `</div></div>`; // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ .table-wrapper —Ç–∞ .collapsible-content
    return html;
}

/**
 * –°—Ç–≤–æ—Ä—é—î HTML-—Ç–∞–±–ª–∏—Ü—é –∑—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é (–¥–ª—è —Å–ø–∏—Å–∫—ñ–≤) –∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º-–∞–∫–æ—Ä–¥–µ–æ–Ω–æ–º.
 * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó.
 * @param {Array<string>} headers - –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–≤–ø—Ü—ñ–≤.
 * @param {Array<object>} data - –ú–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ –∑ –¥–∞–Ω–∏–º–∏.
 * @param {string} keyForCritical - –ö–ª—é—á –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—ñ —Ä—è–¥–∫–∞.
 * @param {boolean} isExpanded - –ß–∏ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∞ —Å–µ–∫—Ü—ñ—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.
 */
function renderStructuredTable(title, headers, data, keyForCritical = null, isExpanded = false) {
    const collapsedClass = isExpanded ? '' : 'collapsed';

    if (!data || data.length === 0) {
        return `<h2 class="collapsible-header ${collapsedClass}">${title}</h2><div class="collapsible-content ${collapsedClass}"><div class="table-wrapper"><p class="text-gray-400 p-4">–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö.</p></div></div>`;
    }

    let html = `<h2 class="collapsible-header ${collapsedClass}">${title}</h2>`;
    html += `<div class="collapsible-content ${collapsedClass}">`;
    html += `<div class="table-wrapper">`; // –û–±–≥–æ—Ä—Ç–∫–∞
    html += `<table class="data-table wide-cols"><thead><tr>`;
    headers.forEach(h => html += `<th>${h}</th>`);
    html += `</tr></thead><tbody>`;

    data.forEach(item => {
        const severityValue = item[keyForCritical] || '';
        const isCritical = keyForCritical && /critical|major|down|fail/i.test(severityValue);
        const rowClass = isCritical ? 'critical' : '';
        
        html += `<tr class="${rowClass}">`;
        
        headers.forEach(headerKey => {
            // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–∞–ø—Ä. "–î–æ–≤–∂–∏–Ω–∞ —Ö–≤–∏–ª—ñ (–ù–º)") –≤ –∫–ª—é—á (–Ω–∞–ø—Ä. "–¥–æ–≤–∂–∏–Ω–∞_—Ö–≤–∏–ª—ñ_(–Ω–º)")
            // –¶–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ—ñ–¥–µ–∞–ª—å–Ω–æ, –∫—Ä–∞—â–µ –º–∞—Ç–∏ –º–∞–ø—ñ–Ω–≥, –∞–ª–µ —Å–ø—Ä–æ–±—É—î–º–æ —Ç–∞–∫
            const itemKey = headerKey.toLowerCase().replace(/ /g, '_').replace(/[\(\)]/g, ''); 
            
            // –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∫–ª—é—á. –Ø–∫—â–æ –Ω—ñ, —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏–π –∫–ª—é—á (—è–∫—â–æ –≤—ñ–Ω —î)
            let value = safe(item[itemKey]);
            
            // –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º –∫–ª—é—á–µ–º, —Å–ø—Ä–æ–±—É—î–º–æ –ø–æ—à–∏—Ä–µ–Ω—ñ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ
            if (value === "") {
                 const keyMap = {
                    "–Ü–º'—è": "name", "–°—Ç–∞—Ç—É—Å": "status", "–ü—Ä–æ—Ç–æ–∫–æ–ª": "protocol", "–û–ø–∏—Å": "description",
                    "–†—ñ–≤–µ–Ω—å": "severity", "–°—Ç–∞–Ω": "state", "–î–∞—Ç–∞": "date", "–ß–∞—Å": "time",
                    "–°–ª–æ—Ç": "slot", "–¢–∏–ø": "type", "–†–æ–ª—å": "role",
                    "–ü–æ—Ä—Ç": "port",
                    "–ù–∞–∑–≤–∞": "item_name", "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ": "used_value", "–õ—ñ–º—ñ—Ç": "control_value"
                 };
                 if(keyMap[headerKey]) {
                    value = safe(item[keyMap[headerKey]]);
                 }
                 // –î–ª—è –∫–ª—é—á—ñ–≤, —è–∫–∏—Ö –Ω–µ–º–∞—î –≤ –º–∞–ø—ñ–Ω–≥—É
                 else if (itemKey === "in_util" || itemKey === "out_util" || itemKey === "–¥—É–ø–ª–µ–∫—Å" || itemKey === "—à–≤–∏–¥–∫—ñ—Å—Ç—å_(mbps)") {
                     const engKey = headerKey.toLowerCase().replace(' (mbps)', '_mbps').split(' ')[0];
                     value = safe(item[engKey]);
                 } else if (headerKey === "–î–æ–≤–∂–∏–Ω–∞ —Ö–≤–∏–ª—ñ (–ù–º)") {
                    value = safe(item["wavelength_nm"]);
                 } else if(headerKey === "–û–Ω–ª–∞–π–Ω") {
                    value = safe(item["online"]);
                 }
            }


            let cellClass = '';
            if (itemKey.includes('—Å—Ç–∞—Ç—É—Å') || itemKey.includes('–ø—Ä–æ—Ç–æ–∫–æ–ª') || headerKey === "–°—Ç–∞—Ç—É—Å" || headerKey === "–ü—Ä–æ—Ç–æ–∫–æ–ª") {
                if (/up/i.test(value)) cellClass = 'up';
                if (/down|fail/i.test(value)) cellClass = 'down';
            }
            
            html += `<td class="${cellClass}">${value}</td>`;
        });
        
        html += `</tr>`;
    });

    html += '</tbody></table>';
    html += `</div></div>`; // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ .table-wrapper —Ç–∞ .collapsible-content
    return html;
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏—Ç—å –ì–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É (Summary, Identity, Resources —ñ —Ç.–¥.) –≤ HTML.
 */
function makeMainHtml(d) {
    const deviceName = d.identity?.sysname || "–ù–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π";
    let html = '';

    // 1. Summary (–ó–≤–µ–¥–µ–Ω–Ω—è)
    const activeInterfaces = (d.interfaces || []).filter(i => /up/i.test(i.status) && i.name && !i.name.includes("LoopBack") && !i.name.includes("NULL")).length;
    const criticalAlarms = (d.alarms || []).filter(a => /critical/i.test(a.severity || a.level)).length;
    const totalPower = (d.resources?.power?.reduce((s, p) => s + (p.total_w || 0), 0) || 0) + " W";
    
    const summaryRows = [
        ["–Ü–º'—è —Ö–æ—Å—Ç–∞", d.identity?.sysname || deviceName],
        ["–ú–æ–¥–µ–ª—å", d.identity?.model || ""],
        ["–í–µ—Ä—Å—ñ—è", d.software?.version || ""],
        ["–ß–∞—Å —Ä–æ–±–æ—Ç–∏", d.software?.uptime || ""],
        ["CPU (—Å–µ—Ä.)", (d.resources?.cpu?.[0]?.avg || "") + "%"],
        ["–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å", totalPower],
        ["–ö—Ä–∏—Ç–∏—á–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏", criticalAlarms],
        ["–ê–∫—Ç–∏–≤–Ω—ñ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏", activeInterfaces],
    ];
    // –†–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ –ø–µ—Ä—à—É —Å–µ–∫—Ü—ñ—é –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    html += renderKeyValueTable("–ó–≤–µ–¥–µ–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è (Summary)", summaryRows, true); 
    
    // 2. Identity & Software
    const identityRows = Object.entries(d.identity || {}).map(([k, v]) => [k, typeof v === 'object' ? JSON.stringify(v, null, 2) : v]);
    html += renderKeyValueTable("–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è (Identity)", identityRows);
    
    const softwareRows = Object.entries(d.software || {}).map(([k, v]) => [k, v]);
    html += renderKeyValueTable("–ü–ó (Software)", softwareRows);

    // 3. Resources (–†–µ—Å—É—Ä—Å–∏)
    const resourceRows = [];
    Object.entries(d.resources || {}).forEach(([k, v]) => {
        if (typeof v === "object" && !Array.isArray(v)) {
            const flat = flatten(v);
            for (const [fk, fv] of Object.entries(flat)) resourceRows.push([`${k}.${fk}`, safe(fv)]);
        } else if (Array.isArray(v) && v.length > 0) {
            const flat = flatten(v[0]);
            for (const [fk, fv] of Object.entries(flat)) resourceRows.push([`${k}.[0].${fk}`, safe(fv)]);
        } else {
            resourceRows.push([k, safe(v)]);
        }
    });
    html += renderKeyValueTable("–†–µ—Å—É—Ä—Å–∏ (Resources)", resourceRows);

    // 4. Hardware (–ü–ª–∞—Ç–∏ —ñ SFP)
    const cardHeaders = ["–°–ª–æ—Ç", "–¢–∏–ø", "–û–Ω–ª–∞–π–Ω", "–°—Ç–∞—Ç—É—Å", "–†–æ–ª—å"];
    html += renderStructuredTable("–ü–ª–∞—Ç–∏ (Hardware Cards)", cardHeaders, d.hardware?.cards, 'Status');

    const sfpHeaders = ["–ü–æ—Ä—Ç", "–î–æ–≤–∂–∏–Ω–∞ —Ö–≤–∏–ª—ñ (–ù–º)"];
    html += renderStructuredTable("SFP-–º–æ–¥—É–ª—ñ (Hardware SFP)", sfpHeaders, d.hardware?.sfp);

    // 5. Interfaces (–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏)
    const interfaceHeaders = ["–Ü–º'—è", "–°—Ç–∞—Ç—É—Å", "–ü—Ä–æ—Ç–æ–∫–æ–ª", "In Util", "Out Util", "–î—É–ø–ª–µ–∫—Å", "–®–≤–∏–¥–∫—ñ—Å—Ç—å (Mbps)", "–û–ø–∏—Å"];
    const interfaceData = (d.interfaces || []).filter(i => i.name);
    html += renderStructuredTable("–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ (Interfaces)", interfaceHeaders, interfaceData, '–°—Ç–∞—Ç—É—Å');

    // 6. Licenses (–õ—ñ—Ü–µ–Ω–∑—ñ—ó)
    const licenseHeaders = ["–ù–∞–∑–≤–∞", "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ", "–õ—ñ–º—ñ—Ç", "–û–ø–∏—Å"];
    html += renderStructuredTable("–õ—ñ—Ü–µ–Ω–∑—ñ—ó (Licenses)", licenseHeaders, d.licenses);

    // 7. Alarms (–ê–≤–∞—Ä—ñ–π–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏)
    const alarmHeaders = ["–†—ñ–≤–µ–Ω—å", "–°—Ç–∞–Ω", "–î–∞—Ç–∞", "–ß–∞—Å", "–û–ø–∏—Å"];
    const alarmData = (d.alarms || []).map(a => ({ 
        ...a, 
        severity: a.severity || a.level // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –∫–ª—é—á –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    }));
    html += renderStructuredTable("–ê–≤–∞—Ä—ñ–π–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏ (Alarms)", alarmHeaders, alarmData, 'severity');

    return html;
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏—Ç—å –ü—Ä–æ—Ç–æ–∫–æ–ª–∏ –≤ HTML.
 */
function extractProtocolsHtml(d) {
    const protocolRows = [];
    
    for (const [proto, content] of Object.entries(d.protocols || {})) {
        if (!content) continue;

        if (Array.isArray(content)) {
            content.forEach((item, i) => {
                const flat = flatten(item);
                for (const [k, v] of Object.entries(flat)) {
                    protocolRows.push({ protocol: proto, field: `${i + 1}.${k}`, value: safe(v) });
                }
            });
        } else if (typeof content === "object") {
            for (const [subkey, subval] of Object.entries(content)) {
                if (Array.isArray(subval)) {
                    subval.forEach((el, j) => {
                        const flat = flatten(el);
                        for (const [k, v] of Object.entries(flat)) {
                            protocolRows.push({ protocol: proto, field: `${subkey}[${j + 1}].${k}`, value: safe(v) });
                        }
                    });
                } else if (typeof subval === "object") {
                    const flat = flatten(subval);
                    for (const [k, v] of Object.entries(flat)) {
                        protocolRows.push({ protocol: proto, field: `${subkey}.${k}`, value: safe(v) });
                    }
                } else {
                    protocolRows.push({ protocol: proto, field: subkey, value: safe(subval) });
                }
            }
        } else {
            protocolRows.push({ protocol: proto, field: "", value: safe(content) });
        }
    }

    const protocolHeaders = ["–ü—Ä–æ—Ç–æ–∫–æ–ª", "–ü–æ–ª–µ", "–ó–Ω–∞—á–µ–Ω–Ω—è"];
    return renderStructuredTable("–î–µ—Ç–∞–ª—ñ –ü—Ä–æ—Ç–æ–∫–æ–ª—ñ–≤ (Protocols Detail)", protocolHeaders, protocolRows);
}


// =================================================================
// === –ì–û–õ–û–í–ù–ï –í–ò–ö–û–ù–ê–ù–ù–Ø ===
// =================================================================
// –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º 'file' –≤ 'jsonPath' –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
async function handleFileSelect(jsonPath, button = "view") { 
    if (!jsonPath) { 
        document.getElementById('json-output').innerHTML = '<p class="text-gray-400">–§–∞–π–ª –Ω–µ –æ–±—Ä–∞–Ω–æ.</p>';
        return;
    }

    try {
        let data;
        if (button === "view") {
            // 1. –í—ã–∑–æ–≤ IPC –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ (—ç—Ç–æ –∑–∞–º–µ–Ω–∏—Ç –≤–µ—Å—å FileReader)
            const ipcResponse = await window.electronAPI.readFile(jsonPath); 

            if (!ipcResponse || !ipcResponse.success) {
                const errorMessage = ipcResponse?.error || "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É.";
                throw new Error(errorMessage);
            }

            const jsonString = ipcResponse.content; 
            if (!jsonString) {
                throw new Error("–§–∞–π–ª –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω–∏—Ö.");
            }

            // 2. –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ JSON, –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–∑ Main Process
            data = JSON.parse(jsonString); 
            
            // 3. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            window.currentJsonPath = jsonPath; // –ò—Å–ø–æ–ª—å–∑—É–µ–º jsonPath
            const baseNameWithExt = jsonPath.split(/[/\\]/).pop(); 
            const baseName = baseNameWithExt.replace(/\.json$/i, '');
            const deviceName = data.identity?.sysname || baseName || 'Device';
            document.getElementById('device-title').textContent = `${deviceName} ‚Äî –ó–≤–µ–¥–µ–Ω–∏–π –ó–≤—ñ—Ç`;

            let htmlOutput = makeMainHtml(data);
            htmlOutput += '<h1>–î–µ—Ç–∞–ª—å–Ω—ñ –ü—Ä–æ—Ç–æ–∫–æ–ª–∏</h1>';
            htmlOutput += extractProtocolsHtml(data);
            document.getElementById('json-output').innerHTML = htmlOutput;
        } 
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É:', error);

        const errorDiv = `...`;
        document.getElementById('json-output').innerHTML = errorDiv;
    }
}

document.addEventListener('DOMContentLoaded', () => {
    const jsonFileInput = document.getElementById('json-file-input');
    const logFileInput = document.getElementById('log-file-input');
    const xlsxFileInput = document.getElementById('xlsx-file-input');
    const outputDiv = document.getElementById('json-output');

    jsonFileInput.addEventListener('click', async () => {
                outputDiv.innerHTML = '<p class="text-lg text-gray-400">–û—á—ñ–∫—É—î–º–æ –≤–∏–±—ñ—Ä json-—Ñ–∞–π–ª—É...</p>';

        try {
            const inputPath = await window.electronAPI.openFileDialog([
                { name: 'Json Files', extensions: ['json'] },
                { name: 'All Files', extensions: ['*'] }
            ]);

            if (!inputPath) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
                outputDiv.innerHTML = '<p class="text-gray-400">–í–∏–±—ñ—Ä —Ñ–∞–π–ª—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.</p>';
                return;
            }
            outputDiv.innerHTML = '<p class="text-lg text-gray-400">–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–µ—Ä–µ–≥–ª—è–¥—É...</p>';
            
            // Ask main to parse the file (main will call analyzer.parseFile)
            await handleFileSelect(inputPath, "view");
            
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', err);
            outputDiv.innerHTML = `<p class="text-lg text-red-500">‚ùå –ü–æ–º–∏–ª–∫–∞: ${err.message}</p>`;
        }
    });
    
    logFileInput.addEventListener('click', async () => {
        outputDiv.innerHTML = '<p class="text-lg text-gray-400">–û—á—ñ–∫—É—î–º–æ –≤–∏–±—ñ—Ä –ª–æ–≥-—Ñ–∞–π–ª—É...</p>';

        try {
            // –ü–†–Ø–ú–û–ô –í–´–ó–û–í –°–ò–°–¢–ï–ú–ù–û–ì–û –î–ò–ê–õ–û–ì–ê (Electron API)
            const inputPath = await window.electronAPI.openFileDialog([
                { name: 'Log Files', extensions: ['txt', 'log'] },
                { name: 'All Files', extensions: ['*'] }
            ]);

            if (!inputPath) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
                outputDiv.innerHTML = '<p class="text-gray-400">–í–∏–±—ñ—Ä —Ñ–∞–π–ª—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.</p>';
                return;
            }
            outputDiv.innerHTML = '<p class="text-lg text-gray-400">–ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞ –æ–±—Ä–æ–±–∫–∞ –ª–æ–≥—É...</p>';
            
            // Ask main to parse the file (main will call analyzer.parseFile)
            const res = await window.electronAPI.analyzeStart('--file', inputPath);
            if (!res || !res.success) throw new Error(res?.error || 'Analyzer failed');
            
            // store the path to the generated JSON for later (export/view)
            window.currentJsonPath = res.outputPath;
            outputDiv.innerHTML = '‚úÖ –ê–Ω–∞–ª—ñ–∑ –ª–æ–≥-—Ñ–∞–π–ª—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.';
            
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', err);
            outputDiv.innerHTML = `<p class="text-lg text-red-500">‚ùå –ü–æ–º–∏–ª–∫–∞: ${err.message}</p>`;
        }
    });

    xlsxFileInput.addEventListener('click', async () => {
        outputDiv.innerHTML = '<p class="text-lg text-gray-400">–û—á—ñ–∫—É—î–º–æ –≤–∏–±—ñ—Ä json-—Ñ–∞–π–ª—É...</p>';

        try {
            // –ü–†–Ø–ú–û–ô –í–´–ó–û–í –°–ò–°–¢–ï–ú–ù–û–ì–û –î–ò–ê–õ–û–ì–ê (Electron API)
            const inputPath = await window.electronAPI.openFileDialog([
                { name: 'Log Files', extensions: ['json'] },
                { name: 'All Files', extensions: ['*'] }
            ]);

            if (!inputPath) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
                outputDiv.innerHTML = '<p class="text-gray-400">–í–∏–±—ñ—Ä —Ñ–∞–π–ª—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.</p>';
                return;
            }
            outputDiv.innerHTML = '<p class="text-lg text-gray-400">–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É...</p>';
            
            // Ask main to parse the file (main will call analyzer.parseFile)
            const res = await window.electronAPI.exportToExcel(inputPath);
            if (!res || !res.success) throw new Error(res?.error || 'Export failed');
            
            // store the path to the generated JSON for later (export/view)
            window.currentJsonPath = res.outputPath;
            outputDiv.innerHTML = '‚úÖ –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.';
            
        } catch (err) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É:', err);
            outputDiv.innerHTML = `<p class="text-lg text-red-500">‚ùå –ü–æ–º–∏–ª–∫–∞: ${err.message}</p>`;
        }
    });

    // --- –õ–û–ì–Ü–ö–ê –ê–ö–û–†–î–ï–û–ù–£ ---
    // –î–æ–¥–∞—î–º–æ —Å–ª—É—Ö–∞—á–∞ –Ω–∞ `json-output`, –æ—Å–∫—ñ–ª—å–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π
    outputDiv.addEventListener('click', (event) => {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–ª—ñ–∫–Ω—É–ª–∏ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ h2
        const header = event.target.closest('h2.collapsible-header');
        if (!header) return;

        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç (–∫–æ–Ω—Ç–µ–Ω—Ç)
        const content = header.nextElementSibling;
        if (content && content.classList.contains('collapsible-content')) {
            // –ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ –∫–ª–∞—Å–∏
            header.classList.toggle('collapsed');
            content.classList.toggle('collapsed');
        }
    });
});

